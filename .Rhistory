dta.sim$goals <- rpois(n = nrow(dta.sim), lambda = predict.glm(eq.reg, newdata = dta.sim, type = "response"))
#Overtime outcome
dta.sim$OT_home_win <- 0
dta.sim$OT_home_win <- rbinom(n = nrow(dta.sim), 1, predict(reg_ot, newdata = dta.sim, type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team != "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team != "Wild",]), 1, predict(reg_ot, newdata = dta.sim[dta.sim$v.team != "Wild",], type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team == "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team == "Wild",]), 1, 0.5)
############################################
### Calculate predicted number of points ###
############################################
dta_h <- dta.sim %>%
dplyr::select(hg = goals, OT_home_win, h.team, v.team, team, team.home, team.away) %>%
dplyr::filter(team == "home")
dta_v <- dta.sim %>%
dplyr::select(vg = goals, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
dta0_p <- bind_rows(dta_h, dta_v) %>%
mutate(point_h = case_when(hg > vg ~ 2,
hg < vg  ~ 0,
hg == vg & OT_home_win==1 ~ 2,
hg == vg & OT_home_win==0 ~ 1),
point_v = case_when(vg > hg ~ 2,
vg < hg ~ 0,
vg == hg & OT_home_win==1 ~ 1,
vg == hg & OT_home_win==0 ~ 2),
points = case_when(team.home ~ point_h,
team.away ~ point_v),
team_goal = case_when(team.home ~ hg,
team.away ~ vg),
opponent_goal = case_when(team.away ~ hg,
team.home ~ vg))
dta_sum <- dta0_p %>%
summarize(team = team.sim,
points = round(82*mean(points), 2),
Team_goals = round(mean(team_goal, na.rm = TRUE), 2),
Opp_goals = round(mean(opponent_goal, na.rm = TRUE), 2))
return(dta_sum)
}
purrr::map(seq_len(n.sim), ~dta.sim) %>%
purrr::map(function(x) rank_func_team(x, team.sim))
# Simulated goals
dta.sim$goals <- rpois(n = nrow(dta.sim), lambda = predict.glm(eq.reg, newdata = dta.sim, type = "response"))
#Overtime outcome
dta.sim$OT_home_win <- 0
dta.sim$OT_home_win <- rbinom(n = nrow(dta.sim), 1, predict(reg_ot, newdata = dta.sim, type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team != "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team != "Wild",]), 1, predict(reg_ot, newdata = dta.sim[dta.sim$v.team != "Wild",], type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team == "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team == "Wild",]), 1, 0.5)
############################################
### Calculate predicted number of points ###
############################################
dta_h <- dta.sim %>%
dplyr::select(hg = goals, OT_home_win, h.team, v.team, team, team.home, team.away) %>%
dplyr::filter(team == "home")
dta_v <- dta.sim %>%
dplyr::select(vg = goals, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
dta0_p <- bind_rows(dta_h, dta_v) %>%
mutate(point_h = case_when(hg > vg ~ 2,
hg < vg  ~ 0,
hg == vg & OT_home_win==1 ~ 2,
hg == vg & OT_home_win==0 ~ 1),
point_v = case_when(vg > hg ~ 2,
vg < hg ~ 0,
vg == hg & OT_home_win==1 ~ 1,
vg == hg & OT_home_win==0 ~ 2),
points = case_when(team.home ~ point_h,
team.away ~ point_v),
team_goal = case_when(team.home ~ hg,
team.away ~ vg),
opponent_goal = case_when(team.away ~ hg,
team.home ~ vg))
dta0_p
dta.h1 <- data.frame(visitor = unique(dta0$v.team)) %>%
mutate(home = "NA",
h.team = home,
v.team = visitor,
visitor = paste("d", visitor, sep = "."),
team = "home",
team.home = TRUE,
team.away = FALSE)
dta.h2 <- data.frame(visitor = unique(dta0$v.team)) %>%
mutate(home = "NA",
h.team = home,
v.team = visitor,
visitor = paste("o", visitor, sep = "."),
team = "visitor",
team.home = TRUE,
team.away = FALSE)
dta.v1 <-  data.frame(home = unique(dta0$h.team)) %>%
mutate(visitor = "NA",
h.team = home,
v.team = visitor,
home = paste("o", home, sep = "."),
team = "home",
team.home = FALSE,
team.away = TRUE)
dta.v2 <-  data.frame(home = unique(dta0$h.team)) %>%
mutate(visitor = "NA",
h.team = home,
v.team = visitor,
home = paste("d", home, sep = "."),
team = "visitor",
team.home = FALSE,
team.away = TRUE)
dta.sim <- bind_rows(dta.h1, dta.h2, dta.v1, dta.v2)
rm(dta.h1, dta.h2, dta.v1, dta.v2)
rank_func_team <- function(data, team.sim){
#Prepare data
dta.sim <- data %>%
mutate(home = ifelse(home == "NA" & team == "home", paste("o", team.sim, sep = "."), as.character(home)),
home = ifelse(home == "NA" & team == "visitor", paste("d", team.sim, sep = "."), as.character(home)),
h.team = ifelse(h.team == "NA", team.sim, as.character(h.team)),
visitor = ifelse(visitor == "NA" & team == "home", paste("d", team.sim, sep = "."), as.character(visitor)),
visitor = ifelse(visitor == "NA" & team == "visitor", paste("o", team.sim, sep = "."), as.character(visitor)),
v.team = ifelse(v.team  == "NA", team.sim, as.character(v.team)))
# Simulated goals
dta.sim$goals <- rpois(n = nrow(dta.sim), lambda = predict.glm(eq.reg, newdata = dta.sim, type = "response"))
#Overtime outcome
dta.sim$OT_home_win <- 0
dta.sim$OT_home_win <- rbinom(n = nrow(dta.sim), 1, predict(reg_ot, newdata = dta.sim, type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team != "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team != "Wild",]), 1, predict(reg_ot, newdata = dta.sim[dta.sim$v.team != "Wild",], type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team == "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team == "Wild",]), 1, 0.5)
############################################
### Calculate predicted number of points ###
############################################
dta_h <- dta.sim %>%
dplyr::select(hg = goals, OT_home_win, h.team, v.team, team, team.home, team.away) %>%
dplyr::filter(team == "home")
dta_v <- dta.sim %>%
dplyr::select(vg = goals, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
dta0_p <- bind_rows(dta_h, dta_v) %>%
mutate(point_h = case_when(hg > vg ~ 2,
hg < vg  ~ 0,
hg == vg & OT_home_win==1 ~ 2,
hg == vg & OT_home_win==0 ~ 1),
point_v = case_when(vg > hg ~ 2,
vg < hg ~ 0,
vg == hg & OT_home_win==1 ~ 1,
vg == hg & OT_home_win==0 ~ 2),
points = case_when(team.home ~ point_h,
team.away ~ point_v),
team_goal = case_when(team.home ~ hg,
team.away ~ vg),
opponent_goal = case_when(team.away ~ hg,
team.home ~ vg))
dta_sum <- dta0_p %>%
summarize(team = team.sim,
points = round(82*mean(points), 2),
Team_goals = round(mean(team_goal, na.rm = TRUE), 2),
Opp_goals = round(mean(opponent_goal, na.rm = TRUE), 2))
return(dta_sum)
}
purrr::map(seq_len(n.sim), ~dta.sim) %>%
purrr::map(function(x) rank_func_team(x, team.sim))
data <- dta.sim
dta.sim <- data %>%
mutate(home = ifelse(home == "NA" & team == "home", paste("o", team.sim, sep = "."), as.character(home)),
home = ifelse(home == "NA" & team == "visitor", paste("d", team.sim, sep = "."), as.character(home)),
h.team = ifelse(h.team == "NA", team.sim, as.character(h.team)),
visitor = ifelse(visitor == "NA" & team == "home", paste("d", team.sim, sep = "."), as.character(visitor)),
visitor = ifelse(visitor == "NA" & team == "visitor", paste("o", team.sim, sep = "."), as.character(visitor)),
v.team = ifelse(v.team  == "NA", team.sim, as.character(v.team)))
# Simulated goals
dta.sim$goals <- rpois(n = nrow(dta.sim), lambda = predict.glm(eq.reg, newdata = dta.sim, type = "response"))
#Overtime outcome
dta.sim$OT_home_win <- 0
dta.sim$OT_home_win <- rbinom(n = nrow(dta.sim), 1, predict(reg_ot, newdata = dta.sim, type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team != "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team != "Wild",]), 1, predict(reg_ot, newdata = dta.sim[dta.sim$v.team != "Wild",], type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team == "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team == "Wild",]), 1, 0.5)
############################################
### Calculate predicted number of points ###
############################################
dta_h <- dta.sim %>%
dplyr::select(hg = goals, OT_home_win, h.team, v.team, team, team.home, team.away) %>%
dplyr::filter(team == "home")
dta_v <- dta.sim %>%
dplyr::select(vg = goals, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
dta0_p <- bind_rows(dta_h, dta_v) %>%
mutate(point_h = case_when(hg > vg ~ 2,
hg < vg  ~ 0,
hg == vg & OT_home_win==1 ~ 2,
hg == vg & OT_home_win==0 ~ 1),
point_v = case_when(vg > hg ~ 2,
vg < hg ~ 0,
vg == hg & OT_home_win==1 ~ 1,
vg == hg & OT_home_win==0 ~ 2),
points = case_when(team.home ~ point_h,
team.away ~ point_v),
team_goal = case_when(team.home ~ hg,
team.away ~ vg),
opponent_goal = case_when(team.away ~ hg,
team.home ~ vg))
dta0_p
data.frame(visitor = unique(dta0$v.team)) %>%
mutate(home = "NA",
h.team = home,
v.team = visitor,
visitor = paste("d", visitor, sep = "."),
team = "home",
team.home = TRUE,
team.away = FALSE)
dta.h1 <- data.frame(visitor = unique(dta0$v.team)) %>%
mutate(home = "NA",
h.team = home,
v.team = visitor,
visitor = paste("d", visitor, sep = "."),
team = "home",
team.home = TRUE,
team.away = FALSE)
dta.h2 <- data.frame(visitor = unique(dta0$v.team)) %>%
mutate(home = "NA",
h.team = home,
v.team = visitor,
visitor = paste("o", visitor, sep = "."),
team = "visitor",
team.home = TRUE,
team.away = FALSE)
dta.h2
dta.v1 <-  data.frame(home = unique(dta0$h.team)) %>%
mutate(visitor = "NA",
h.team = home,
v.team = visitor,
home = paste("o", home, sep = "."),
team = "home",
team.home = FALSE,
team.away = TRUE)
dta.v1
dta.v2 <-  data.frame(home = unique(dta0$h.team)) %>%
mutate(visitor = "NA",
h.team = home,
v.team = visitor,
home = paste("d", home, sep = "."),
team = "visitor",
team.home = FALSE,
team.away = TRUE)
dta.v2
dta.sim <- bind_rows(dta.h1, dta.h2, dta.v1, dta.v2)
rm(dta.h1, dta.h2, dta.v1, dta.v2)
data <- dta.sim
data %>%
mutate(home = ifelse(home == "NA" & team == "home", paste("o", team.sim, sep = "."), as.character(home)),
home = ifelse(home == "NA" & team == "visitor", paste("d", team.sim, sep = "."), as.character(home)),
h.team = ifelse(h.team == "NA", team.sim, as.character(h.team)),
visitor = ifelse(visitor == "NA" & team == "home", paste("d", team.sim, sep = "."), as.character(visitor)),
visitor = ifelse(visitor == "NA" & team == "visitor", paste("o", team.sim, sep = "."), as.character(visitor)),
v.team = ifelse(v.team  == "NA", team.sim, as.character(v.team)))
dta.sim <- data %>%
mutate(home = ifelse(home == "NA" & team == "home", paste("o", team.sim, sep = "."), as.character(home)),
home = ifelse(home == "NA" & team == "visitor", paste("d", team.sim, sep = "."), as.character(home)),
h.team = ifelse(h.team == "NA", team.sim, as.character(h.team)),
visitor = ifelse(visitor == "NA" & team == "home", paste("d", team.sim, sep = "."), as.character(visitor)),
visitor = ifelse(visitor == "NA" & team == "visitor", paste("o", team.sim, sep = "."), as.character(visitor)),
v.team = ifelse(v.team  == "NA", team.sim, as.character(v.team)))
# Simulated goals
dta.sim$goals <- rpois(n = nrow(dta.sim), lambda = predict.glm(eq.reg, newdata = dta.sim, type = "response"))
dta.sim
#Overtime outcome
dta.sim$OT_home_win <- 0
dta.sim$OT_home_win <- rbinom(n = nrow(dta.sim), 1, predict(reg_ot, newdata = dta.sim, type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team != "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team != "Wild",]), 1, predict(reg_ot, newdata = dta.sim[dta.sim$v.team != "Wild",], type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team == "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team == "Wild",]), 1, 0.5)
dta_h <- dta.sim %>%
dplyr::select(hg = goals, OT_home_win, h.team, v.team, team, team.home, team.away) %>%
dplyr::filter(team == "home")
dta_v <- dta.sim %>%
dplyr::select(vg = goals, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
dta_h
dta_v <- dta.sim %>%
dplyr::select(vg = goals, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
dta_v
dta_h <- dta.sim %>%
dplyr::select(hg = goals, OT_home_win, h.team, v.team, team, team.home, team.away) %>%
dplyr::filter(team == "home")
dta_v <- dta.sim %>%
dplyr::select(vg = goals, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
bind_cols(dta_h, dta_v)
dta0_p <- bind_cols(dta_h, dta_v) %>%
mutate(point_h = case_when(hg > vg ~ 2,
hg < vg  ~ 0,
hg == vg & OT_home_win==1 ~ 2,
hg == vg & OT_home_win==0 ~ 1),
point_v = case_when(vg > hg ~ 2,
vg < hg ~ 0,
vg == hg & OT_home_win==1 ~ 1,
vg == hg & OT_home_win==0 ~ 2),
points = case_when(team.home ~ point_h,
team.away ~ point_v),
team_goal = case_when(team.home ~ hg,
team.away ~ vg),
opponent_goal = case_when(team.away ~ hg,
team.home ~ vg))
dta0_p %>%
summarize(team = team.sim,
points = round(82*mean(points), 2),
Team_goals = round(mean(team_goal, na.rm = TRUE), 2),
Opp_goals = round(mean(opponent_goal, na.rm = TRUE), 2))
rank_func_team <- function(data, team.sim){
#Prepare data
dta.sim <- data %>%
mutate(home = ifelse(home == "NA" & team == "home", paste("o", team.sim, sep = "."), as.character(home)),
home = ifelse(home == "NA" & team == "visitor", paste("d", team.sim, sep = "."), as.character(home)),
h.team = ifelse(h.team == "NA", team.sim, as.character(h.team)),
visitor = ifelse(visitor == "NA" & team == "home", paste("d", team.sim, sep = "."), as.character(visitor)),
visitor = ifelse(visitor == "NA" & team == "visitor", paste("o", team.sim, sep = "."), as.character(visitor)),
v.team = ifelse(v.team  == "NA", team.sim, as.character(v.team)))
# Simulated goals
dta.sim$goals <- rpois(n = nrow(dta.sim), lambda = predict.glm(eq.reg, newdata = dta.sim, type = "response"))
#Overtime outcome
dta.sim$OT_home_win <- 0
dta.sim$OT_home_win <- rbinom(n = nrow(dta.sim), 1, predict(reg_ot, newdata = dta.sim, type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team != "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team != "Wild",]), 1, predict(reg_ot, newdata = dta.sim[dta.sim$v.team != "Wild",], type = "response"))
#dta.sim$OT_home_win[dta.sim$v.team == "Wild"] <- rbinom(n = nrow(dta.sim[dta.sim$v.team == "Wild",]), 1, 0.5)
############################################
### Calculate predicted number of points ###
############################################
dta_h <- dta.sim %>%
dplyr::select(hg = goals, OT_home_win, h.team, v.team, team, team.home, team.away) %>%
dplyr::filter(team == "home")
dta_v <- dta.sim %>%
dplyr::select(vg = goals, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
dta0_p <- bind_cols(dta_h, dta_v) %>%
mutate(point_h = case_when(hg > vg ~ 2,
hg < vg  ~ 0,
hg == vg & OT_home_win==1 ~ 2,
hg == vg & OT_home_win==0 ~ 1),
point_v = case_when(vg > hg ~ 2,
vg < hg ~ 0,
vg == hg & OT_home_win==1 ~ 1,
vg == hg & OT_home_win==0 ~ 2),
points = case_when(team.home ~ point_h,
team.away ~ point_v),
team_goal = case_when(team.home ~ hg,
team.away ~ vg),
opponent_goal = case_when(team.away ~ hg,
team.home ~ vg))
dta_sum <- dta0_p %>%
summarize(team = team.sim,
points = round(82*mean(points), 2),
Team_goals = round(mean(team_goal, na.rm = TRUE), 2),
Opp_goals = round(mean(opponent_goal, na.rm = TRUE), 2))
return(dta_sum)
}
purrr::map(seq_len(n.sim), ~dta.sim) %>%
purrr::map(function(x) rank_func_team(x, team.sim))
purrr::map(seq_len(n.sim), ~dta.sim) %>%
purrr::map(function(x) rank_func_team(x, team.sim)) %>%
bind_rows() %>%
summarise_all(mean)
purrr::map(seq_len(n.sim), ~dta.sim) %>%
purrr::map(function(x) rank_func_team(x, team.sim)) %>%
bind_rows() %>%
summarise_all(mean) %>%
mutate(team = team.sim)
knitr::opts_chunk$set(include = TRUE, echo = TRUE, results='asis', message = FALSE, warning = FALSE, fig.pos = 'h')
rm(list = ls())
library(pacman)
pacman::p_load(tidyverse)
pacman::p_load(stringr)
pacman::p_load(boot)
pacman::p_load(matrixStats)
pacman::p_load(snow)
pacman::p_load(Rlab)
pacman::p_load(gtable)
pacman::p_load(ggplot2)
pacman::p_load(gridExtra)
pacman::p_load(lubridate)
pacman::p_load(XML)
pacman::p_load(rvest)
pacman::p_load(boot)
pacman::p_load(openxlsx)
pacman::p_load(kableExtra)
pacman::p_load(stargazer)
pacman::p_load(data.table)
set.seed(123457)
#Number of loops and number of cores
n.rep <- 1000 #for simulating season
n.sim <- 82 * 250
# Function to wrap text
wrapper <- function(x, ...)
{
paste(strwrap(x, ...), collapse = "\n")
}
##############################################
######### Read and prepare the data ##########
##############################################
source("Data.R")
###################################################################
######### Estimate models for the home and visitor teams ##########
###################################################################
eq.reg <- glm(goals ~ -1 + home + visitor, data = dta, weights = dta$weight, maxit = 250, family = "poisson")
#summary(eq.reg)
##############################################
######## The game goes into overtime #########
##############################################
reg_ot <- glm(OT_home_win ~ -1 + h.team + v.team, data = dta[dta$team == "home" & dta$OT == 1,], family=binomial(link=logit), weights = dta$weight[dta$team == "home" & dta$OT == 1])
#summary(reg_ot)
###########################################
### Calculate points accumulated so far ###
###########################################
dta_h <- dta %>%
dplyr::select(date, hg = goals, OT_home_win, h.team, v.team, team) %>%
dplyr::filter(team == "home")  %>%
dplyr::select(-team)
dta_v <- dta %>%
dplyr::select(date, vg = goals, OT_home_win, h.team, v.team, team) %>%
dplyr::filter(team == "visitor") %>%
dplyr::select(-team)
dta_p <- left_join(dta_h, dta_v) %>%
mutate(point_h = case_when(hg > vg ~ 2,
hg < vg  ~ 0,
hg == vg & OT_home_win==1 ~ 2,
hg == vg & OT_home_win==0 ~ 1),
point_v = case_when(vg > hg ~ 2,
vg < hg ~ 0,
vg == hg & OT_home_win==1 ~ 1,
vg == hg & OT_home_win==0 ~ 2)) %>%
dplyr::select(h.team, v.team, point_h, point_v)
dta_v <- dta_p %>%
dplyr::select(v.team, point_v) %>%
rename(team = v.team, points = point_v)
dta_h <- dta_p %>%
dplyr::select(h.team, point_h) %>%
rename(team = h.team, points = point_h)
dta_p_total <- rbind(dta_v, dta_h) %>%
group_by(team) %>%
summarize(points = sum(points))
rm(dta_h, dta_v)
source("Funcs.R")
###################################
### Simulate season n.rep times ###
###################################
dta_r <- purrr::map(seq_len(n.rep), ~dta0) %>%
purrr::map(sim_season) %>%
bind_rows() %>%
group_by(team) %>%
summarize(points = mean(points),
playoffs = 100*round(mean(playoffs),3),
East = 100*round(mean(East),3),
West = 100*round(mean(West),3),
President = 100*round(mean(President),3),
second = 100*round(mean(second),3),
third = 100*round(mean(third),3),
final = 100*round(mean(final),3),
champion = 100*round(mean(champion),3)) %>%
arrange(-points)
# Oberved goals
dta_h <- dta %>%
dplyr::select(date, hg = goals, h.team, v.team)
dta_v <- dta %>%
dplyr::select(date, vg = goals, h.team, v.team)
dta_obs <- left_join(dta_h, dta_v)
ggplot(dta_obs, aes(y = hg, x = vg)) +
geom_point() +
geom_smooth(method=lm) +
ylab("Home goals") +
xlab("Visitor goals") +
labs(title = "Observed goals for and goals against") +
theme_bw() +
theme(strip.background = element_blank())
reg1 <- lm(hg ~ vg, data = dta_obs)
# Simulated goals
dta0$goals <- rpois(n = nrow(dta0), lambda = predict(eq.reg, newdata = dta0, type = "response"))
dta0_h <- dta0 %>%
dplyr::select(date, hg = goals, h.team, v.team)
dta0_v <- dta0 %>%
dplyr::select(date, vg = goals, h.team, v.team)
dta0_sim <- left_join(dta0_h, dta0_v)
ggplot(dta0_sim, aes(y = hg, x = vg)) +
geom_point() +
geom_smooth(method=lm) +
ylab("Home goals") +
xlab("Visitor goals") +
labs(title = "Simulated goals for and goals against") +
theme_bw() +
theme(strip.background =element_blank())
reg2 <- lm(hg ~ vg, data = dta0_sim)
stargazer(reg1, reg2, type = "html", title = "Comparison of correlation between goals for and goals against", column.labels = c("Observed", "Predicted"))
rm(dta_h, dta_ob, dta_p, dta_p_total, dta_v, dta0_h, dta0_obs, dta0_sim, dta0_v, reg1, reg2)
n.sim <- 10
teams %>%
purrr:map(function(x) rank_func(dta.sim, x)) %>%
bind_rows()
teams %>%
purrr::map(function(x) rank_func(dta.sim, x)) %>%
bind_rows()
teams %>%
purrr::map(function(x) rank_func(dta.sim, x)) %>%
bind_rows() %>%
arrange(-points) %>%
mutate(rank = 1:length(teams),
diff = round(Team_goals - Opp_goals, 2),
Ratio = round(Team_goals/Opp_goals, 2)) %>%
dplyr::select(rank, team, points, Team_goals, Opp_goals, diff, Ratio) %>%
rename(Rank = rank,
Team = team,
`Exp PTS` = points,
`Exp GF` = Team_goals,
`Exp GA` = Opp_goals,
DIFF = diff)
